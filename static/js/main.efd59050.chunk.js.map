{"version":3,"sources":["features/userSlice.js","firebase.js","components/Login.js","components/Navbar.js","pages/Home.js","pages/About.js","pages/History.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","Login","className","style","fontSize","Button","onClick","signInWithRedirect","catch","error","alert","message","Navbar","useSelector","useState","sidebar","setSidebar","showSidebar","to","displayName","Avatar","src","photo","signOut","Home","About","History","App","dispatch","useDispatch","useEffect","onAuthStateChanged","authUser","uid","photoURL","email","path","exact","component","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efd59050.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: state => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB4DSOHMwE2K0mDrFwJWLtmZye-xKJvJDo\",\n    authDomain: \"learner-a57d8.firebaseapp.com\",\n    databaseURL: \"https://learner-a57d8.firebaseio.com\",\n    projectId: \"learner-a57d8\",\n    storageBucket: \"learner-a57d8.appspot.com\",\n    messagingSenderId: \"625275265926\",\n    appId: \"1:625275265926:web:621907e2d03dcbd9174207\",\n    measurementId: \"G-B8MXCP2X92\"\n  };\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;","import React from 'react';\nimport './Login.css';\nimport { Button } from '@material-ui/core';\nimport SchoolIcon from '@material-ui/icons/School';\nimport { auth, provider } from \"../firebase\";\n\n/**\n * Component is used to log the user into\n * the application\n */\nfunction Login() {\n\n    /**\n     * When user clicks sign in, the user is prompted \n     * to sign in with Google in a popup window\n     */\n    const signIn = () => {\n        auth.signInWithRedirect(provider)\n        .catch((error) => alert(error.message));\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login_logo\">\n                <SchoolIcon style={{ fontSize: 300 }}/>\n                <h1 className=\"title\">Learner</h1>\n            </div>\n\n            <Button onClick={signIn}>Sign In</Button>\n        </div>\n    );    \n}\n\nexport default Login;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../features/userSlice';\nimport SchoolIcon from '@material-ui/icons/School';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport './Navbar.css';\nimport { Avatar, Button } from '@material-ui/core';\nimport { auth } from '../firebase';\nimport { Link } from 'react-router-dom';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\n\n/**\n * The Navbar component is used to render the navigation\n * bar for the user, this navigation bar includes a sidebar\n * for navigating between pages\n */\nfunction Navbar() {\n    \n    // User to pull data from the user\n    const user = useSelector(selectUser);\n    // Stores state of sidebar\n    const [sidebar, setSidebar] = useState(false);\n    // Toggles the sidebar \n    const showSidebar = () => setSidebar(!sidebar);\n\n    return (\n        <div>\n            {/* Hamburger Menu Icon */}\n            <div className=\"navbar_menu\">\n                <Link to='#' className='navbar_menu_icon' >\n                    <MenuIcon onClick={showSidebar} style={{ fontSize: 40 }}/>\n                </Link>\n\n                <div className=\"navbar_title_section\">\n                    <SchoolIcon className=\"navbar_logo\" style={{ fontSize: 40 }}/>\n                    <h1 className=\"navbar_title\">Learner</h1>\n                </div>\n\n                <div className=\"navbar_user_section\">\n                    <h2 className=\"navbar_name\">{user.displayName}</h2>\n                    <Avatar src={user.photo} className=\"navbar_avatar\"/>\n                </div>\n            </div>\n\n            {/* List of page links */}\n            <nav className={sidebar ? 'nav_menu active' : 'nav_menu'}>\n                <ul className=\"nav_menu_items\" onClick={showSidebar}>\n                    <li className=\"navbar_toggle\">\n                        <Link to=\"#\" className=\"navbar_menu_icon\">\n                            <CloseIcon style={{ fontSize: 40 }} />\n                        </Link>\n                    </li>\n\n                    <li className=\"nav_text\">\n                        <Link to=\"/\">\n                            <HomeIcon />\n                            <span>Home</span>\n                        </Link>\n                    </li>\n\n                    <li className=\"nav_text\">\n                        <Link to=\"/about\">\n                            <InfoIcon />\n                            <span>About</span>\n                        </Link>\n                    </li>\n\n                    <li className=\"nav_text\">\n                        <Link to=\"/history\">\n                            <MenuBookIcon />\n                            <span>History</span>\n                        </Link>\n                    </li>\n\n                    <li className=\"nav_text\">\n                        <Link to=\"#\" onClick={() => auth.signOut()} >\n                            <ExitToAppIcon  />\n                            <span>Sign-Out</span>\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n\n            {/*\n            <div className=\"navbar_title_section\">\n                <SchoolIcon className=\"navbar_logo\" style={{ fontSize: 50 }}/>\n                <h1 className=\"navbar_title\">Learner</h1>\n            </div>\n\n             \n            <div className=\"navbar_buttons\"> \n                <Button onClick={() => auth.signOut()}>Home</Button>\n                <Button onClick={() => auth.signOut()}>About</Button>\n                <Button onClick={() => auth.signOut()}>History</Button>\n                <Button onClick={() => auth.signOut()}>Sign Out</Button>\n            </div>\n            \n\n\n\n            */}\n        </div>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport './Home.css';\nimport Navbar from '../components/Navbar'\n\nfunction Home() {\n    return (\n        <div>\n            <Navbar />\n            <div className=\"home\">\n                <h1>Home</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nfunction About() {\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\n\nfunction History() {\n    return (\n        <div>\n            <h1>History</h1>\n        </div>\n    );\n}\n\nexport default History;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport { selectUser, login, logout } from './features/userSlice';\r\nimport Login from \"./components/Login\";\r\nimport { auth } from './firebase';\r\nimport Navbar from './components/Navbar';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport History from './pages/History';\r\n\r\n\r\nfunction App() {\r\n\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(authUser => {\r\n      if (authUser) {\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }));\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    })\r\n  }, [user]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {user ? \r\n        <Router>\r\n          <Switch>\r\n            <Route path='/' exact component={Home} />\r\n            <Route path='/about' exact component={About} />\r\n            <Route path='/history' exact component={History} />\r\n          </Switch>\r\n        </Router> \r\n        : \r\n        <Login />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}